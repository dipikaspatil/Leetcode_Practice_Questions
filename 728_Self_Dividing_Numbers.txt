A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.

Also, a self-dividing number is not allowed to contain the digit zero.

Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.

Example 1:
Input: 
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
Note:

The boundaries of each input argument are 1 <= left <= right <= 10000.

-------------------------------------------------------------------------------------------------------------

my solution - 
class Solution {
public:
    vector<int> selfDividingNumbers(int left, int right) {
        vector<int> ip_vect;
        int digit;
        int num;
        for (int i = left; i <= right; ++i) {
            num = i;
            //cout << num << endl;
            if (num < 10) {
                ip_vect.push_back(num);
                continue;
            }
            if (num % 10 == 0) {
                continue;
            }
            digit = num % 10;
            while(digit != 0) {
                //cout << digit << " ";
                if (i % digit != 0) {
                    break;
                }
                
                num /= 10;
                if (num == 0) {
                    ip_vect.push_back(i);
                    break;
                }
                digit = num % 10;
            }
            //cout << endl;
        }
        
        return ip_vect;
    }
};

------------------------------------------------------------------------------------------------------------

better solution - 

 vector<int> ip_vect;
        int num;
        for (int i = left; i <= right; ++i) {
            num = i;
            //cout << num << endl;
            if (num < 10) {
                ip_vect.push_back(num);
                continue;
            }
            if (num % 10 == 0) {
                continue;
            }
            
            while(num) {
                if ((num % 10 == 0) ||  (i % (num % 10) != 0)) {
                    break;
                }
                
                num /= 10;
            }
            
            if (!num) {
                ip_vect.push_back(i);
            }
            //cout << endl;
        }
        
        return ip_vect;
    }   
};
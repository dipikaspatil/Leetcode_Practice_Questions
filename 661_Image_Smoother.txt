Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. If a cell has less than 8 surrounding cells, then use as many as you can.

Example 1:
Input:
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output:
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
Explanation:
For the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0
Note:
The value in the given matrix is in the range of [0, 255].
The length and width of the given matrix are in the range of [1, 150].

--------------------------------------------------------------------------------------

class Solution {
public:
    void helper(vector<vector<int>> &M, int i, int j, int &sum, int &cnt){
        if (i < 0 || i > M.size()-1 || j < 0 || j > M[0].size()-1) {
            return;
        }
        //cout << i << " " << j << endl;
        ++cnt;
        sum += M[i][j];        
        return;
    }
    vector<vector<int>> imageSmoother(vector<vector<int>>& M) {
        vector<vector<int>> ret_vect = M;
        int cnt = 0, sum = 0;
        for (int i = 0; i < M.size(); ++i){
            for (int j = 0; j < M[0].size(); ++j){
                helper(M, i-1, j, sum, cnt);
                helper(M, i-1, j-1, sum, cnt);
                helper(M, i-1, j+1, sum, cnt);
                helper(M, i, j-1, sum, cnt);
                helper(M, i, j, sum, cnt);
                helper(M, i, j+1, sum, cnt);
                helper(M, i+1, j-1, sum, cnt);
                helper(M, i+1, j, sum, cnt);
                helper(M, i+1, j+1, sum, cnt);
                //cout << sum << " " << cnt << endl;
                ret_vect[i][j] = (sum/cnt);
                cnt = 0; 
                sum = 0;
            }
        }
        
        return ret_vect;
        
    }
};
152. Maximum Product Subarray

Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.

Example 1:

Input: [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

----------------------------------------------------------------------------------

//Brute Force

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int current_product, product = nums[0];
        
        for (int i = 0; i < nums.size(); ++i){
            current_product = 1;
            for (int j = i ; j < nums.size(); ++j) {
                current_product *= nums[j];
                if (current_product > product) {
                    product = current_product;
                }
            }
        }
        
        
        return product;
    }
};

--------------------------------------------------------------------------------
//Kadaneâ€™s algorithm - dynamic programming

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int current_max_product = nums[0], global_max_product = nums[0], global_min_product = nums[0], current_min_product = nums[0], product = nums[0]; 
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] > 0) {
                current_max_product = max(nums[i], global_max_product * nums[i]); 
            } else {
                current_max_product = max(nums[i], global_min_product * nums[i]); 
            }
            
            if (nums[i] < 0) {
                current_min_product = min(nums[i], global_max_product * nums[i]); 
            } else {
                current_min_product = min(nums[i], global_min_product * nums[i]); 
            }
            
            //cout << current_max_product << " " << product << endl;
            product = max(current_max_product, product);
            
            global_max_product = current_max_product;
            global_min_product = current_min_product;
            
        }
        
        return product;
        
        
    }
};
We are given two strings, A and B.

A shift on A consists of taking string A and moving the leftmost character to the rightmost position. For example, if A = 'abcde', then it will be 'bcdea' after one shift on A. Return True if and only if A can become B after some number of shifts on A.

Example 1:
Input: A = 'abcde', B = 'cdeab'
Output: true

Example 2:
Input: A = 'abcde', B = 'abced'
Output: false
Note:

A and B will have length at most 100.
-------------------------------------------------------------------------------------
class Solution {
public:
    bool rotateString(string A, string B) {
        if (A.length() != B.length()) {
            return false;
        }
        
        if (A.length() <= 1) {
            return (A == B);
        }
        
        string new_str;
        for (int i = 0; i < B.length(); ++i) {
            if (A[0] == B[i]) {
                new_str = B.substr(i) + B.substr(0, i);
                //cout << new_str << endl;
                if (new_str == A) {
                    return true;
                }
            }
        }
        
        return false;
    }
};
----------------------------------------------------------------------------------------
//better solution
class Solution {
public:
    bool rotateString(string A, string B) {
        if (A.size()==B.size()&&(A+A).find(B) != string::npos)
            return 1;
        return 0;
    }
};
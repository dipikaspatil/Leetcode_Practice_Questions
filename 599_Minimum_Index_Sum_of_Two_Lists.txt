599. Minimum Index Sum of Two Lists

Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.

You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.

Example 1:
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
Output: ["Shogun"]
Explanation: The only restaurant they both like is "Shogun".
Example 2:
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["KFC", "Shogun", "Burger King"]
Output: ["Shogun"]
Explanation: The restaurant they both like and have the least index sum is "Shogun" with index sum 1 (0+1).
Note:
The length of both lists will be in the range of [1, 1000].
The length of strings in both lists will be in the range of [1, 30].
The index is starting from 0 to the list length minus 1.
No duplicates in both lists.

--------------------------------------------------------------------------

class Solution {
public:
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
        unordered_map<string, int> ip_map;
        
        for (int i = 0; i < list1.size(); ++i){
            ip_map[list1[i]] = i; 
        }
        int sum_index = list1.size() + list2.size(); 
        vector<string> ret_vect;
        vector<int> ret_vect2;
        
        for (int i = 0; i < list2.size(); ++i){
            if (i > sum_index) {
                break;
            }
            if (ip_map.find(list2[i]) != ip_map.end()) {
                if (sum_index > ip_map[list2[i]] + i) {
                    sum_index = ip_map[list2[i]] + i;
                }
                
                //cout << sum_index << endl;
                ret_vect2.push_back(ip_map[list2[i]]);
                ip_map[list2[i]] = ip_map[list2[i]] + i;
                
            }
        }
        
        for (int i = 0; i < ret_vect2.size(); ++i){
            if (ip_map[list1[ret_vect2[i]]] == sum_index) {
                ret_vect.push_back(list1[ret_vect2[i]]);
            }
        }
        return ret_vect;
    }
};